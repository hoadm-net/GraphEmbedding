import streamlit as st
import pandas as pd
import networkx as nx
from pyvis.network import Network
import os
import numpy as np
import random
from collections import defaultdict
import tempfile
from text2graph import TextGraphBuilder, load_data_files

# C·∫•u h√¨nh trang
st.set_page_config(
    page_title="Random Walk Visualization",
    page_icon="üö∂",
    layout="wide"
)

class RandomWalker:
    def __init__(self, graph, walk_length=10, num_walks=10):
        self.graph = graph
        self.walk_length = walk_length
        self.num_walks = num_walks
        self.walks = []
        
    def single_walk(self, start_node):
        """Th·ª±c hi·ªán m·ªôt random walk t·ª´ node b·∫Øt ƒë·∫ßu"""
        if start_node not in self.graph.nodes():
            return []
            
        walk = [start_node]
        current_node = start_node
        
        for _ in range(self.walk_length - 1):
            neighbors = list(self.graph.neighbors(current_node))
            if not neighbors:  # N·∫øu kh√¥ng c√≥ neighbors
                break
            # Ch·ªçn ng·∫´u nhi√™n m·ªôt neighbor
            next_node = random.choice(neighbors)
            walk.append(next_node)
            current_node = next_node
            
        return walk
    
    def generate_walks(self, start_nodes=None):
        """T·∫°o multiple random walks"""
        self.walks = []
        
        if start_nodes is None:
            start_nodes = list(self.graph.nodes())
        
        for start_node in start_nodes:
            for _ in range(self.num_walks):
                walk = self.single_walk(start_node)
                if len(walk) > 1:  # Ch·ªâ gi·ªØ walks c√≥ √≠t nh·∫•t 2 nodes
                    self.walks.append(walk)
        
        return self.walks
    
    def get_walk_statistics(self):
        """Th·ªëng k√™ v·ªÅ c√°c walks"""
        if not self.walks:
            return {}
        
        walk_lengths = [len(walk) for walk in self.walks]
        node_frequencies = defaultdict(int)
        
        for walk in self.walks:
            for node in walk:
                node_frequencies[node] += 1
        
        return {
            'total_walks': len(self.walks),
            'avg_walk_length': np.mean(walk_lengths),
            'min_walk_length': min(walk_lengths),
            'max_walk_length': max(walk_lengths),
            'unique_nodes_visited': len(node_frequencies),
            'most_visited_nodes': dict(sorted(node_frequencies.items(), 
                                            key=lambda x: x[1], reverse=True)[:10])
        }



def visualize_graph_with_walks(graph, selected_nodes=None, walk_paths=None):
    """Tr·ª±c quan h√≥a graph v·ªõi highlighting cho selected nodes v√† walk paths"""
    if len(graph.nodes()) == 0:
        st.warning("Graph kh√¥ng c√≥ nodes.")
        return None
    
    net = Network(height="600px", width="100%", notebook=False, directed=False)
    net.barnes_hut()
    
    # T·∫°o sets ƒë·ªÉ d·ªÖ check
    selected_set = set(selected_nodes) if selected_nodes else set()
    walk_nodes = set()
    if walk_paths:
        for walk in walk_paths:
            walk_nodes.update(walk)
    
    # Th√™m nodes v·ªõi m√†u s·∫Øc theo tr·∫°ng th√°i
    for node in graph.nodes():
        freq = graph.nodes[node].get('frequency', 1)
        
        # X√°c ƒë·ªãnh m√†u node
        if node in selected_set:
            color = '#ff4444'  # ƒê·ªè cho selected nodes
        elif node in walk_nodes:
            color = '#44ff44'  # Xanh l√° cho nodes trong walk
        else:
            color = '#4444ff'  # Xanh d∆∞∆°ng cho nodes th√¥ng th∆∞·ªùng
        
        # Hi·ªÉn th·ªã label v·ªõi kho·∫£ng tr·∫Øng thay v√¨ underscore
        display_label = node.replace('_', ' ')
        
        tooltip = f"""T·ª´: {display_label}
T·∫ßn su·∫•t: {freq}
B·∫≠c: {graph.degree[node]}
Tr·∫°ng th√°i: {"Selected" if node in selected_set else "In Walk" if node in walk_nodes else "Normal"}"""
        
        net.add_node(
            node,
            label=display_label,
            title=tooltip,
            size=25 if node in selected_set else 20,
            color=color
        )
    
    # Th√™m edges
    for edge in graph.edges():
        w = graph[edge[0]][edge[1]].get('weight', 1)
        
        # Highlight edges n·∫øu c·∫£ 2 nodes ƒë·ªÅu ƒë∆∞·ª£c ch·ªçn ho·∫∑c trong walk
        if (edge[0] in selected_set and edge[1] in selected_set):
            edge_color = '#ff4444'  # ƒê·ªè cho edges gi·ªØa selected nodes
            width = 3
        elif (edge[0] in walk_nodes and edge[1] in walk_nodes):
            edge_color = '#44ff44'  # Xanh cho edges trong walk
            width = 2
        else:
            edge_color = '#808080'  # X√°m cho edges th√¥ng th∆∞·ªùng
            width = 1
            
        net.add_edge(edge[0], edge[1], width=width, color=edge_color, 
                    title=f"Tr·ªçng s·ªë: {w:.2f}")
    
    # C·∫•u h√¨nh visualization
    net.set_options('''
    var options = {
        "nodes": {
            "font": {"size": 16},
            "borderWidth": 2
        },
        "edges": {
            "smooth": false
        },
        "physics": {
            "enabled": true,
            "forceAtlas2Based": {
                "gravitationalConstant": -50,
                "centralGravity": 0.01,
                "springLength": 100,
                "springConstant": 0.08
            },
            "maxVelocity": 146,
            "solver": "forceAtlas2Based",
            "timestep": 0.35,
            "stabilization": {
                "enabled": true,
                "iterations": 150,
                "updateInterval": 25,
                "fit": true
            }
        }
    }
    ''')
    
    # L∆∞u v√† hi·ªÉn th·ªã
    with tempfile.NamedTemporaryFile('w', delete=False, suffix='.html') as f:
        net.save_graph(f.name)
        html_content = open(f.name, 'r', encoding='utf-8').read()
    
    st.components.v1.html(html_content, height=650, scrolling=True)
    return None

def main():
    st.title("üö∂ Random Walk on Text Graphs")
    st.markdown("**Kh√°m ph√° ƒë·ªì th·ªã t·ª´ v·ª±ng b·∫±ng Random Walk v√† t·∫°o Node Vectors**")
    
    # Sidebar controls
    st.sidebar.header("‚öôÔ∏è C·∫•u h√¨nh")
    
    # Load graph t·ª´ text data
    st.sidebar.subheader("1. T·∫°o Graph")
    files, texts = load_data_files()
    
    if not files:
        st.error("Kh√¥ng t√¨m th·∫•y file d·ªØ li·ªáu trong th∆∞ m·ª•c 'data'")
        return
    
    # Ch·ªçn files
    selected_files = st.sidebar.multiselect(
        "Ch·ªçn files:",
        files,
        default=files[:2] if len(files) >= 2 else files
    )
    
    if not selected_files:
        st.warning("Vui l√≤ng ch·ªçn √≠t nh·∫•t m·ªôt file.")
        return
    
    # Tham s·ªë graph
    window_size = st.sidebar.slider("Window size:", 1, 10, 3)
    min_frequency = st.sidebar.slider("Min frequency:", 1, 10, 2)
    weight_method = st.sidebar.selectbox("Weight method:", ["frequency", "pmi"])
    
    # T·∫°o graph
    with st.spinner("T·∫°o graph..."):
        graph_builder = TextGraphBuilder(window_size=window_size, weight_method=weight_method)
        all_text = " ".join([texts[f] for f in selected_files])
        tokens = graph_builder.process_text(all_text)
        graph_builder.build_cooccurrence_matrix(tokens)
        G = graph_builder.build_graph(min_frequency=min_frequency)
    
    if len(G.nodes()) == 0:
        st.error("Graph kh√¥ng c√≥ nodes. Th·ª≠ gi·∫£m min_frequency.")
        return
    
    # Random Walk parameters
    st.sidebar.subheader("2. Random Walk")
    walk_length = st.sidebar.slider("Walk length:", 3, 20, 10)
    num_walks = st.sidebar.slider("Walks per node:", 1, 10, 3)
    
    # Node selection
    st.sidebar.subheader("3. Ch·ªçn Nodes")
    all_nodes = sorted(list(G.nodes()))
    selected_nodes = st.sidebar.multiselect(
        "Ch·ªçn nodes ƒë·ªÉ highlight:",
        all_nodes,
        default=all_nodes[:3] if len(all_nodes) >= 3 else all_nodes[:1]
    )
    
    # Th·ª±c hi·ªán Random Walk
    walker = RandomWalker(G, walk_length=walk_length, num_walks=num_walks)
    
    # Ch·ªçn lo·∫°i walk
    walk_mode = st.sidebar.radio(
        "Random walk t·ª´:",
        ["Single walk demo", "Selected nodes only"]
    )
    
    if walk_mode == "Single walk demo":
        if selected_nodes:
            single_walk = walker.single_walk(selected_nodes[0])
            walks = [single_walk] if single_walk else []
        else:
            walks = []
    else:  # Selected nodes only
        walks = walker.generate_walks(start_nodes=selected_nodes)
    
    # Statistics
    stats = walker.get_walk_statistics()
    
    # Display
    st.subheader("üìä Graph Visualization")
    
    # Legend
    st.markdown("""
    **Legend:**
    - üî¥ **Selected nodes** (ƒë√£ ch·ªçn)
    - üü¢ **Walk nodes** (trong random walks)  
    - üîµ **Other nodes** (c√≤n l·∫°i)
    """)
    
    visualize_graph_with_walks(G, selected_nodes, walks)
        
    
    # Walk details
    if walks:
        st.subheader("üö∂ Walk Details")
        
        # Hi·ªÉn th·ªã m·ªôt s·ªë walks m·∫´u
        num_display = min(5, len(walks))
        
        for i in range(num_display):
            walk = walks[i]
            walk_display = " ‚Üí ".join([node.replace('_', ' ') for node in walk])
            st.write(f"**Walk {i+1}:** {walk_display}")
        
        if len(walks) > num_display:
            st.write(f"... v√† {len(walks) - num_display} walks kh√°c")
    


if __name__ == "__main__":
    main()